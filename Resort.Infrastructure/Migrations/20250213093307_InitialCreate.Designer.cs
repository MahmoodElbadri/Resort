// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Resort.Infrastructure.Data;

#nullable disable

namespace Resort.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250213093307_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Resort.Domain.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VillaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VillaId");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Private Pool",
                            VillaId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Microwave",
                            VillaId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Private Balcony",
                            VillaId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "1 king bed and 1 sofa bed",
                            VillaId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Private Plunge Pool",
                            VillaId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Microwave and Mini Refrigerator",
                            VillaId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Private Balcony",
                            VillaId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "King bed or 2 double beds",
                            VillaId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Private Pool",
                            VillaId = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "Jacuzzi",
                            VillaId = 3
                        },
                        new
                        {
                            Id = 11,
                            Name = "Private Balcony",
                            VillaId = 3
                        });
                });

            modelBuilder.Entity("Resort.Domain.Entities.Villa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Occupancy")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Sqft")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Villas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 0,
                            CreatedDate = new DateTime(2025, 2, 13, 11, 33, 5, 591, DateTimeKind.Local).AddTicks(8161),
                            Description = "This is details of Villa 1",
                            ImageUrl = "https://example.com/images/royal-villa.jpg",
                            Name = "Royal Villa",
                            Occupancy = 4,
                            Price = 200.0,
                            Sqft = 300,
                            UpdatedDate = new DateTime(2025, 2, 13, 11, 33, 5, 591, DateTimeKind.Local).AddTicks(8245)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 0,
                            CreatedDate = new DateTime(2025, 2, 13, 11, 33, 5, 591, DateTimeKind.Local).AddTicks(8255),
                            Description = "This is details of Villa 2",
                            ImageUrl = "https://example.com/images/palace-villa.jpg",
                            Name = "Palace Villa",
                            Occupancy = 4,
                            Price = 150.0,
                            Sqft = 200,
                            UpdatedDate = new DateTime(2025, 2, 13, 11, 33, 5, 591, DateTimeKind.Local).AddTicks(8259)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 0,
                            CreatedDate = new DateTime(2025, 2, 13, 11, 33, 5, 591, DateTimeKind.Local).AddTicks(8266),
                            Description = "This is details of Villa 3",
                            ImageUrl = "https://example.com/images/paradise-villa.jpg",
                            Name = "Paradise Villa",
                            Occupancy = 4,
                            Price = 600.0,
                            Sqft = 100,
                            UpdatedDate = new DateTime(2025, 2, 13, 11, 33, 5, 591, DateTimeKind.Local).AddTicks(8270)
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 0,
                            CreatedDate = new DateTime(2025, 2, 13, 11, 33, 5, 591, DateTimeKind.Local).AddTicks(8364),
                            Description = "This is details of Villa 4",
                            ImageUrl = "https://example.com/images/luxury-villa.jpg",
                            Name = "Luxury Villa",
                            Occupancy = 4,
                            Price = 700.0,
                            Sqft = 120,
                            UpdatedDate = new DateTime(2025, 2, 13, 11, 33, 5, 591, DateTimeKind.Local).AddTicks(8369)
                        });
                });

            modelBuilder.Entity("Resort.Domain.Entities.VillaNumber", b =>
                {
                    b.Property<int>("Villa_Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Villa_Number"));

                    b.Property<string>("SpecialDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VillaId")
                        .HasColumnType("int");

                    b.HasKey("Villa_Number");

                    b.HasIndex("VillaId");

                    b.ToTable("VillaNumbers");

                    b.HasData(
                        new
                        {
                            Villa_Number = 101,
                            VillaId = 1
                        },
                        new
                        {
                            Villa_Number = 102,
                            VillaId = 1
                        },
                        new
                        {
                            Villa_Number = 103,
                            VillaId = 1
                        },
                        new
                        {
                            Villa_Number = 201,
                            VillaId = 2
                        },
                        new
                        {
                            Villa_Number = 202,
                            VillaId = 2
                        },
                        new
                        {
                            Villa_Number = 203,
                            VillaId = 2
                        });
                });

            modelBuilder.Entity("Resort.Domain.Entities.Amenity", b =>
                {
                    b.HasOne("Resort.Domain.Entities.Villa", "Villa")
                        .WithMany("VillaAmenity")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("Resort.Domain.Entities.VillaNumber", b =>
                {
                    b.HasOne("Resort.Domain.Entities.Villa", "Villa")
                        .WithMany()
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("Resort.Domain.Entities.Villa", b =>
                {
                    b.Navigation("VillaAmenity");
                });
#pragma warning restore 612, 618
        }
    }
}
